% awk, cli 


# double space a file
awk '1;{print ""}' <file> 
awk 'BEGIN{ORS="\n\n"};1' <file>
 
# triple space a file
awk '1;{print "\n"}' <file>
 
# precede each line by its line number FOR THAT FILE (left alignment).
# Using a tab (\t) instead of space will preserve margins.
awk '{print FNR "\t" $0}' <file>

# precede each line by its line number FOR ALL FILES TOGETHER, with tab.
awk '{print NR "\t" $0}' <file>

# number each line of a file (number on left, right-aligned)
awk '{printf("%5d : %s\n", NR,$0)}' <file>

# number each line of file, but only print numbers if line is not blank
awk 'NF{$0=++a " :" $0};1' <file>
awk '{print (NF? ++a " :" :"") $0}' <file>

# count lines (emulates "wc -l")
awk 'END{print NR}' <file>

# print the sums of the fields of every line
awk '{s=0; for (i=1; i<=NF; i++) s=s+$i; print s}' <file>

# add all fields in all lines and print the sum
awk '{for (i=1; i<=NF; i++) s=s+$i}; END{print s}' <file>

# print every line after replacing each field with its absolute value
awk '{for (i=1; i<=NF; i++) if ($i < 0) $i = -$i; print }'
awk '{for (i=1; i<=NF; i++) $i = ($i < 0) ? -$i : $i; print }'

# print the total number of fields ("words") in all lines
awk '{ total = total + NF }; END {print total}' <file>

# print the total number of lines that contain "Beth"
awk '/Beth/{n++}; END {print n+0}' <file>
# print the number of fields in each line, followed by the line
awk '{ print NF ":" $0 } ' <file>

# print the last field of each line
awk '{ print $NF }' <file>

# print the last field of the last line
awk '{ field = $NF }; END{ print field }' <file>

# print every line with more than 4 fields
awk 'NF > 4' <file>

# print every line where the value of the last field is > 4
awk '$NF > 4' <file>

# delete ALL blank lines from a file (same as "grep '.' ")
awk NF <file>
awk '/./' <file>

# remove duplicate, consecutive lines (emulates "uniq")
awk 'a !~ $0; {a=$0}' <file>

# remove duplicate, nonconsecutive lines
awk '!a[$0]++' <file>                    # most concise script
awk '!($0 in a){a[$0];print}' <file>     # most efficient script


# $0 is all blocks
awk '{print $1, $4}' <file>
awk '{print $0}' <file>

# -F '.' is separator
awk -F. '{print $1, $1}' <file>

# NF get column
awk '{print NF}' <file>
awk -F. '{print NF}' <file>

# $NF is the last column
awk '{print $NF}' <file>
awk '{print $(NF-1)}' <file>

# substr()
cat <file> | awk '{print substr($1, 6)}'

# lenght is the string lenght
cat <file> | awk '{print lenght}'

# sum
cat <file> | awk 'DEBIN{total=0}{total+=$3}END{print total}'

$ file: fd . -t f
